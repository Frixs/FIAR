@model Fiar.ViewModels.ResetPasswordViewModel

@{
    ViewData["Title"] = "Reset Password";
}
<div class="text-center">
    <h1 class="display-4">RESET PASSWORD</h1>
</div>

<div class="container">
    @if (@ViewData["ufeedback_failure"] != null)
    {
        <div>@ViewData["ufeedback_failure"]</div>
    }
    @if (ViewData["ufeedback_success"] != null)
    {
        <div>@ViewData["ufeedback_success"]</div>
    }
    <form asp-controller="Home" asp-action="ResetPasswordRequest" class="needs-validation" novalidate>
        <input asp-for="Id" type="hidden" value="@Model?.Id" readonly>
        <input asp-for="Token" type="hidden" value="@Model?.Token" readonly>
        <div class="form-group margin-bottom-30">
            <label asp-for="NewPassword">New Password:</label>
            <input asp-for="NewPassword" type="password" maxlength="@Fiar.UserDataModel.Password_MaxLength" class="form-control" placeholder="Enter password" required>
            <div class="valid-feedback">Valid.</div>
            <div class="invalid-feedback">Please check again this field.</div>
        </div>
        <div class="form-group margin-bottom-30">
            <label for="confirm-password">Confirm Password:</label>
            <input id="confirm-password" type="password" maxlength="@Fiar.UserDataModel.Password_MaxLength" class="form-control" placeholder="Enter password" required>
            <div class="valid-feedback">Valid.</div>
            <div id="confirm-password-feedback" class="valid-feedback display-block"></div>
            <div class="invalid-feedback">Please check again this field.</div>
        </div>
        <button id="password-submit-btn" type="submit" class="btn btn-color-dark d-block mx-auto">Submit</button>
    </form>
</div>

<a asp-area="" asp-controller="Home" asp-action="Index" class="btn btn-color-dark-nobg d-block mx-auto margin-top-50">Go Back</a>

@section Scripts{
    <script>
        // Disable form submissions if there are invalid fields
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Get the forms we want to add validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();

        $(document).ready(function () {
            $('#password-submit-btn').prop('disabled', true);

            // Confirm password matching
            $('#NewPassword, #confirm-password').on('keyup', function () {
                if ($('#NewPassword').val() == $('#confirm-password').val()) {
                    $('#confirm-password-feedback').html('Matching.');
                    $('#password-submit-btn').prop('disabled', false);
                    $('#confirm-password-feedback').removeClass("invalid-feedback");
                    $('#confirm-password-feedback').addClass("valid-feedback");
                } else {
                    $('#confirm-password-feedback').html('Not Matching.');
                    $('#password-submit-btn').prop('disabled', true);
                    $('#confirm-password-feedback').removeClass("valid-feedback");
                    $('#confirm-password-feedback').addClass("invalid-feedback");
                }
            });
        });
    </script>
}